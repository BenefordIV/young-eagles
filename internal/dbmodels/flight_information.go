// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FlightInformation is an object representing the database table.
type FlightInformation struct {
	// primary uuid for the flight
	UUID      string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	CreatedTS null.Time `boil:"created_ts" json:"created_ts,omitempty" toml:"created_ts" yaml:"created_ts,omitempty"`
	UpdatedTS null.Time `boil:"updated_ts" json:"updated_ts,omitempty" toml:"updated_ts" yaml:"updated_ts,omitempty"`
	DeletedTS null.Time `boil:"deleted_ts" json:"deleted_ts,omitempty" toml:"deleted_ts" yaml:"deleted_ts,omitempty"`
	// status of the flight; in_flight or complete
	Status null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	// uuid of associated pilot
	PilotUUID string `boil:"pilot_uuid" json:"pilot_uuid" toml:"pilot_uuid" yaml:"pilot_uuid"`
	// child uuid
	ChildUUID       null.String `boil:"child_uuid" json:"child_uuid,omitempty" toml:"child_uuid" yaml:"child_uuid,omitempty"`
	PlaneCallNumber null.String `boil:"plane_call_number" json:"plane_call_number,omitempty" toml:"plane_call_number" yaml:"plane_call_number,omitempty"`

	R *flightInformationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flightInformationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlightInformationColumns = struct {
	UUID            string
	CreatedTS       string
	UpdatedTS       string
	DeletedTS       string
	Status          string
	PilotUUID       string
	ChildUUID       string
	PlaneCallNumber string
}{
	UUID:            "uuid",
	CreatedTS:       "created_ts",
	UpdatedTS:       "updated_ts",
	DeletedTS:       "deleted_ts",
	Status:          "status",
	PilotUUID:       "pilot_uuid",
	ChildUUID:       "child_uuid",
	PlaneCallNumber: "plane_call_number",
}

var FlightInformationTableColumns = struct {
	UUID            string
	CreatedTS       string
	UpdatedTS       string
	DeletedTS       string
	Status          string
	PilotUUID       string
	ChildUUID       string
	PlaneCallNumber string
}{
	UUID:            "flight_information.uuid",
	CreatedTS:       "flight_information.created_ts",
	UpdatedTS:       "flight_information.updated_ts",
	DeletedTS:       "flight_information.deleted_ts",
	Status:          "flight_information.status",
	PilotUUID:       "flight_information.pilot_uuid",
	ChildUUID:       "flight_information.child_uuid",
	PlaneCallNumber: "flight_information.plane_call_number",
}

// Generated where

var FlightInformationWhere = struct {
	UUID            whereHelperstring
	CreatedTS       whereHelpernull_Time
	UpdatedTS       whereHelpernull_Time
	DeletedTS       whereHelpernull_Time
	Status          whereHelpernull_String
	PilotUUID       whereHelperstring
	ChildUUID       whereHelpernull_String
	PlaneCallNumber whereHelpernull_String
}{
	UUID:            whereHelperstring{field: "\"flight_information\".\"uuid\""},
	CreatedTS:       whereHelpernull_Time{field: "\"flight_information\".\"created_ts\""},
	UpdatedTS:       whereHelpernull_Time{field: "\"flight_information\".\"updated_ts\""},
	DeletedTS:       whereHelpernull_Time{field: "\"flight_information\".\"deleted_ts\""},
	Status:          whereHelpernull_String{field: "\"flight_information\".\"status\""},
	PilotUUID:       whereHelperstring{field: "\"flight_information\".\"pilot_uuid\""},
	ChildUUID:       whereHelpernull_String{field: "\"flight_information\".\"child_uuid\""},
	PlaneCallNumber: whereHelpernull_String{field: "\"flight_information\".\"plane_call_number\""},
}

// FlightInformationRels is where relationship names are stored.
var FlightInformationRels = struct {
	Child                           string
	Pilot                           string
	PlaneCallNumberPlaneInformation string
}{
	Child:                           "Child",
	Pilot:                           "Pilot",
	PlaneCallNumberPlaneInformation: "PlaneCallNumberPlaneInformation",
}

// flightInformationR is where relationships are stored.
type flightInformationR struct {
	Child                           *ChildInformation `boil:"Child" json:"Child" toml:"Child" yaml:"Child"`
	Pilot                           *PilotDatum       `boil:"Pilot" json:"Pilot" toml:"Pilot" yaml:"Pilot"`
	PlaneCallNumberPlaneInformation *PlaneInformation `boil:"PlaneCallNumberPlaneInformation" json:"PlaneCallNumberPlaneInformation" toml:"PlaneCallNumberPlaneInformation" yaml:"PlaneCallNumberPlaneInformation"`
}

// NewStruct creates a new relationship struct
func (*flightInformationR) NewStruct() *flightInformationR {
	return &flightInformationR{}
}

func (r *flightInformationR) GetChild() *ChildInformation {
	if r == nil {
		return nil
	}
	return r.Child
}

func (r *flightInformationR) GetPilot() *PilotDatum {
	if r == nil {
		return nil
	}
	return r.Pilot
}

func (r *flightInformationR) GetPlaneCallNumberPlaneInformation() *PlaneInformation {
	if r == nil {
		return nil
	}
	return r.PlaneCallNumberPlaneInformation
}

// flightInformationL is where Load methods for each relationship are stored.
type flightInformationL struct{}

var (
	flightInformationAllColumns            = []string{"uuid", "created_ts", "updated_ts", "deleted_ts", "status", "pilot_uuid", "child_uuid", "plane_call_number"}
	flightInformationColumnsWithoutDefault = []string{"uuid", "pilot_uuid"}
	flightInformationColumnsWithDefault    = []string{"created_ts", "updated_ts", "deleted_ts", "status", "child_uuid", "plane_call_number"}
	flightInformationPrimaryKeyColumns     = []string{"uuid"}
	flightInformationGeneratedColumns      = []string{}
)

type (
	// FlightInformationSlice is an alias for a slice of pointers to FlightInformation.
	// This should almost always be used instead of []FlightInformation.
	FlightInformationSlice []*FlightInformation

	flightInformationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flightInformationType                 = reflect.TypeOf(&FlightInformation{})
	flightInformationMapping              = queries.MakeStructMapping(flightInformationType)
	flightInformationPrimaryKeyMapping, _ = queries.BindMapping(flightInformationType, flightInformationMapping, flightInformationPrimaryKeyColumns)
	flightInformationInsertCacheMut       sync.RWMutex
	flightInformationInsertCache          = make(map[string]insertCache)
	flightInformationUpdateCacheMut       sync.RWMutex
	flightInformationUpdateCache          = make(map[string]updateCache)
	flightInformationUpsertCacheMut       sync.RWMutex
	flightInformationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single flightInformation record from the query.
func (q flightInformationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FlightInformation, error) {
	o := &FlightInformation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for flight_information")
	}

	return o, nil
}

// All returns all FlightInformation records from the query.
func (q flightInformationQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlightInformationSlice, error) {
	var o []*FlightInformation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to FlightInformation slice")
	}

	return o, nil
}

// Count returns the count of all FlightInformation records in the query.
func (q flightInformationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count flight_information rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q flightInformationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if flight_information exists")
	}

	return count > 0, nil
}

// Child pointed to by the foreign key.
func (o *FlightInformation) Child(mods ...qm.QueryMod) childInformationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.ChildUUID),
	}

	queryMods = append(queryMods, mods...)

	return ChildInformations(queryMods...)
}

// Pilot pointed to by the foreign key.
func (o *FlightInformation) Pilot(mods ...qm.QueryMod) pilotDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.PilotUUID),
	}

	queryMods = append(queryMods, mods...)

	return PilotData(queryMods...)
}

// PlaneCallNumberPlaneInformation pointed to by the foreign key.
func (o *FlightInformation) PlaneCallNumberPlaneInformation(mods ...qm.QueryMod) planeInformationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"call_number\" = ?", o.PlaneCallNumber),
	}

	queryMods = append(queryMods, mods...)

	return PlaneInformations(queryMods...)
}

// LoadChild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightInformationL) LoadChild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlightInformation interface{}, mods queries.Applicator) error {
	var slice []*FlightInformation
	var object *FlightInformation

	if singular {
		var ok bool
		object, ok = maybeFlightInformation.(*FlightInformation)
		if !ok {
			object = new(FlightInformation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFlightInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFlightInformation))
			}
		}
	} else {
		s, ok := maybeFlightInformation.(*[]*FlightInformation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFlightInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFlightInformation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &flightInformationR{}
		}
		if !queries.IsNil(object.ChildUUID) {
			args[object.ChildUUID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightInformationR{}
			}

			if !queries.IsNil(obj.ChildUUID) {
				args[obj.ChildUUID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`child_information`),
		qm.WhereIn(`child_information.uuid in ?`, argsSlice...),
		qmhelper.WhereIsNull(`child_information.deleted_ts`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChildInformation")
	}

	var resultSlice []*ChildInformation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChildInformation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for child_information")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for child_information")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Child = foreign
		if foreign.R == nil {
			foreign.R = &childInformationR{}
		}
		foreign.R.ChildFlightInformations = append(foreign.R.ChildFlightInformations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChildUUID, foreign.UUID) {
				local.R.Child = foreign
				if foreign.R == nil {
					foreign.R = &childInformationR{}
				}
				foreign.R.ChildFlightInformations = append(foreign.R.ChildFlightInformations, local)
				break
			}
		}
	}

	return nil
}

// LoadPilot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightInformationL) LoadPilot(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlightInformation interface{}, mods queries.Applicator) error {
	var slice []*FlightInformation
	var object *FlightInformation

	if singular {
		var ok bool
		object, ok = maybeFlightInformation.(*FlightInformation)
		if !ok {
			object = new(FlightInformation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFlightInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFlightInformation))
			}
		}
	} else {
		s, ok := maybeFlightInformation.(*[]*FlightInformation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFlightInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFlightInformation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &flightInformationR{}
		}
		args[object.PilotUUID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightInformationR{}
			}

			args[obj.PilotUUID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pilot_data`),
		qm.WhereIn(`pilot_data.uuid in ?`, argsSlice...),
		qmhelper.WhereIsNull(`pilot_data.deleted_ts`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PilotDatum")
	}

	var resultSlice []*PilotDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PilotDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pilot_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pilot_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pilot = foreign
		if foreign.R == nil {
			foreign.R = &pilotDatumR{}
		}
		foreign.R.PilotFlightInformations = append(foreign.R.PilotFlightInformations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PilotUUID == foreign.UUID {
				local.R.Pilot = foreign
				if foreign.R == nil {
					foreign.R = &pilotDatumR{}
				}
				foreign.R.PilotFlightInformations = append(foreign.R.PilotFlightInformations, local)
				break
			}
		}
	}

	return nil
}

// LoadPlaneCallNumberPlaneInformation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightInformationL) LoadPlaneCallNumberPlaneInformation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlightInformation interface{}, mods queries.Applicator) error {
	var slice []*FlightInformation
	var object *FlightInformation

	if singular {
		var ok bool
		object, ok = maybeFlightInformation.(*FlightInformation)
		if !ok {
			object = new(FlightInformation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFlightInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFlightInformation))
			}
		}
	} else {
		s, ok := maybeFlightInformation.(*[]*FlightInformation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFlightInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFlightInformation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &flightInformationR{}
		}
		if !queries.IsNil(object.PlaneCallNumber) {
			args[object.PlaneCallNumber] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightInformationR{}
			}

			if !queries.IsNil(obj.PlaneCallNumber) {
				args[obj.PlaneCallNumber] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plane_information`),
		qm.WhereIn(`plane_information.call_number in ?`, argsSlice...),
		qmhelper.WhereIsNull(`plane_information.deleted_ts`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlaneInformation")
	}

	var resultSlice []*PlaneInformation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlaneInformation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plane_information")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plane_information")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlaneCallNumberPlaneInformation = foreign
		if foreign.R == nil {
			foreign.R = &planeInformationR{}
		}
		foreign.R.PlaneCallNumberFlightInformations = append(foreign.R.PlaneCallNumberFlightInformations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlaneCallNumber, foreign.CallNumber) {
				local.R.PlaneCallNumberPlaneInformation = foreign
				if foreign.R == nil {
					foreign.R = &planeInformationR{}
				}
				foreign.R.PlaneCallNumberFlightInformations = append(foreign.R.PlaneCallNumberFlightInformations, local)
				break
			}
		}
	}

	return nil
}

// SetChild of the flightInformation to the related item.
// Sets o.R.Child to related.
// Adds o to related.R.ChildFlightInformations.
func (o *FlightInformation) SetChild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChildInformation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"flight_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"child_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, flightInformationPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChildUUID, related.UUID)
	if o.R == nil {
		o.R = &flightInformationR{
			Child: related,
		}
	} else {
		o.R.Child = related
	}

	if related.R == nil {
		related.R = &childInformationR{
			ChildFlightInformations: FlightInformationSlice{o},
		}
	} else {
		related.R.ChildFlightInformations = append(related.R.ChildFlightInformations, o)
	}

	return nil
}

// RemoveChild relationship.
// Sets o.R.Child to nil.
// Removes o from all passed in related items' relationships struct.
func (o *FlightInformation) RemoveChild(ctx context.Context, exec boil.ContextExecutor, related *ChildInformation) error {
	var err error

	queries.SetScanner(&o.ChildUUID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("child_uuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Child = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChildFlightInformations {
		if queries.Equal(o.ChildUUID, ri.ChildUUID) {
			continue
		}

		ln := len(related.R.ChildFlightInformations)
		if ln > 1 && i < ln-1 {
			related.R.ChildFlightInformations[i] = related.R.ChildFlightInformations[ln-1]
		}
		related.R.ChildFlightInformations = related.R.ChildFlightInformations[:ln-1]
		break
	}
	return nil
}

// SetPilot of the flightInformation to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.PilotFlightInformations.
func (o *FlightInformation) SetPilot(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PilotDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"flight_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pilot_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, flightInformationPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PilotUUID = related.UUID
	if o.R == nil {
		o.R = &flightInformationR{
			Pilot: related,
		}
	} else {
		o.R.Pilot = related
	}

	if related.R == nil {
		related.R = &pilotDatumR{
			PilotFlightInformations: FlightInformationSlice{o},
		}
	} else {
		related.R.PilotFlightInformations = append(related.R.PilotFlightInformations, o)
	}

	return nil
}

// SetPlaneCallNumberPlaneInformation of the flightInformation to the related item.
// Sets o.R.PlaneCallNumberPlaneInformation to related.
// Adds o to related.R.PlaneCallNumberFlightInformations.
func (o *FlightInformation) SetPlaneCallNumberPlaneInformation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PlaneInformation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"flight_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"plane_call_number"}),
		strmangle.WhereClause("\"", "\"", 2, flightInformationPrimaryKeyColumns),
	)
	values := []interface{}{related.CallNumber, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlaneCallNumber, related.CallNumber)
	if o.R == nil {
		o.R = &flightInformationR{
			PlaneCallNumberPlaneInformation: related,
		}
	} else {
		o.R.PlaneCallNumberPlaneInformation = related
	}

	if related.R == nil {
		related.R = &planeInformationR{
			PlaneCallNumberFlightInformations: FlightInformationSlice{o},
		}
	} else {
		related.R.PlaneCallNumberFlightInformations = append(related.R.PlaneCallNumberFlightInformations, o)
	}

	return nil
}

// RemovePlaneCallNumberPlaneInformation relationship.
// Sets o.R.PlaneCallNumberPlaneInformation to nil.
// Removes o from all passed in related items' relationships struct.
func (o *FlightInformation) RemovePlaneCallNumberPlaneInformation(ctx context.Context, exec boil.ContextExecutor, related *PlaneInformation) error {
	var err error

	queries.SetScanner(&o.PlaneCallNumber, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("plane_call_number")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlaneCallNumberPlaneInformation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlaneCallNumberFlightInformations {
		if queries.Equal(o.PlaneCallNumber, ri.PlaneCallNumber) {
			continue
		}

		ln := len(related.R.PlaneCallNumberFlightInformations)
		if ln > 1 && i < ln-1 {
			related.R.PlaneCallNumberFlightInformations[i] = related.R.PlaneCallNumberFlightInformations[ln-1]
		}
		related.R.PlaneCallNumberFlightInformations = related.R.PlaneCallNumberFlightInformations[:ln-1]
		break
	}
	return nil
}

// FlightInformations retrieves all the records using an executor.
func FlightInformations(mods ...qm.QueryMod) flightInformationQuery {
	mods = append(mods, qm.From("\"flight_information\""), qmhelper.WhereIsNull("\"flight_information\".\"deleted_ts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"flight_information\".*"})
	}

	return flightInformationQuery{q}
}

// FindFlightInformation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlightInformation(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*FlightInformation, error) {
	flightInformationObj := &FlightInformation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"flight_information\" where \"uuid\"=$1 and \"deleted_ts\" is null", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, flightInformationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from flight_information")
	}

	return flightInformationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FlightInformation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no flight_information provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedTS).IsZero() {
			queries.SetScanner(&o.CreatedTS, currTime)
		}
		if queries.MustTime(o.UpdatedTS).IsZero() {
			queries.SetScanner(&o.UpdatedTS, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(flightInformationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flightInformationInsertCacheMut.RLock()
	cache, cached := flightInformationInsertCache[key]
	flightInformationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flightInformationAllColumns,
			flightInformationColumnsWithDefault,
			flightInformationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flightInformationType, flightInformationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flightInformationType, flightInformationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"flight_information\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"flight_information\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into flight_information")
	}

	if !cached {
		flightInformationInsertCacheMut.Lock()
		flightInformationInsertCache[key] = cache
		flightInformationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the FlightInformation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FlightInformation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedTS, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	flightInformationUpdateCacheMut.RLock()
	cache, cached := flightInformationUpdateCache[key]
	flightInformationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flightInformationAllColumns,
			flightInformationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_ts"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update flight_information, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"flight_information\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, flightInformationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flightInformationType, flightInformationMapping, append(wl, flightInformationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update flight_information row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for flight_information")
	}

	if !cached {
		flightInformationUpdateCacheMut.Lock()
		flightInformationUpdateCache[key] = cache
		flightInformationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q flightInformationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for flight_information")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for flight_information")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlightInformationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"flight_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, flightInformationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in flightInformation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all flightInformation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FlightInformation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no flight_information provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedTS).IsZero() {
			queries.SetScanner(&o.CreatedTS, currTime)
		}
		queries.SetScanner(&o.UpdatedTS, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(flightInformationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flightInformationUpsertCacheMut.RLock()
	cache, cached := flightInformationUpsertCache[key]
	flightInformationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			flightInformationAllColumns,
			flightInformationColumnsWithDefault,
			flightInformationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			flightInformationAllColumns,
			flightInformationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert flight_information, could not build update column list")
		}

		ret := strmangle.SetComplement(flightInformationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(flightInformationPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert flight_information, could not build conflict column list")
			}

			conflict = make([]string, len(flightInformationPrimaryKeyColumns))
			copy(conflict, flightInformationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"flight_information\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(flightInformationType, flightInformationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flightInformationType, flightInformationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert flight_information")
	}

	if !cached {
		flightInformationUpsertCacheMut.Lock()
		flightInformationUpsertCache[key] = cache
		flightInformationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single FlightInformation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FlightInformation) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no FlightInformation provided for delete")
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flightInformationPrimaryKeyMapping)
		sql = "DELETE FROM \"flight_information\" WHERE \"uuid\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedTS = null.TimeFrom(currTime)
		wl := []string{"deleted_ts"}
		sql = fmt.Sprintf("UPDATE \"flight_information\" SET %s WHERE \"uuid\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(flightInformationType, flightInformationMapping, append(wl, flightInformationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from flight_information")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for flight_information")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flightInformationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no flightInformationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_ts": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from flight_information")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for flight_information")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlightInformationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightInformationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"flight_information\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, flightInformationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightInformationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedTS = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_ts"}
		sql = fmt.Sprintf("UPDATE \"flight_information\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, flightInformationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from flightInformation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for flight_information")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FlightInformation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlightInformation(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlightInformationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlightInformationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"flight_information\".* FROM \"flight_information\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, flightInformationPrimaryKeyColumns, len(*o)) +
		"and \"deleted_ts\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in FlightInformationSlice")
	}

	*o = slice

	return nil
}

// FlightInformationExists checks if the FlightInformation row exists.
func FlightInformationExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"flight_information\" where \"uuid\"=$1 and \"deleted_ts\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if flight_information exists")
	}

	return exists, nil
}

// Exists checks if the FlightInformation row exists.
func (o *FlightInformation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FlightInformationExists(ctx, exec, o.UUID)
}
