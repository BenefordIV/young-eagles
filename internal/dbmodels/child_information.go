// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChildInformation is an object representing the database table.
type ChildInformation struct {
	// unique id of the child that is used when for begining a new flight
	UUID           string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	FirstName      null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName       null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	DateOfBirth    null.Time   `boil:"date_of_birth" json:"date_of_birth,omitempty" toml:"date_of_birth" yaml:"date_of_birth,omitempty"`
	HasCertificate null.Bool   `boil:"has_certificate" json:"has_certificate,omitempty" toml:"has_certificate" yaml:"has_certificate,omitempty"`
	CreatedTS      null.Time   `boil:"created_ts" json:"created_ts,omitempty" toml:"created_ts" yaml:"created_ts,omitempty"`
	UpdatedTS      null.Time   `boil:"updated_ts" json:"updated_ts,omitempty" toml:"updated_ts" yaml:"updated_ts,omitempty"`
	DeletedTS      null.Time   `boil:"deleted_ts" json:"deleted_ts,omitempty" toml:"deleted_ts" yaml:"deleted_ts,omitempty"`
	ParentID       null.String `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`

	R *childInformationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L childInformationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChildInformationColumns = struct {
	UUID           string
	FirstName      string
	LastName       string
	DateOfBirth    string
	HasCertificate string
	CreatedTS      string
	UpdatedTS      string
	DeletedTS      string
	ParentID       string
}{
	UUID:           "uuid",
	FirstName:      "first_name",
	LastName:       "last_name",
	DateOfBirth:    "date_of_birth",
	HasCertificate: "has_certificate",
	CreatedTS:      "created_ts",
	UpdatedTS:      "updated_ts",
	DeletedTS:      "deleted_ts",
	ParentID:       "parent_id",
}

var ChildInformationTableColumns = struct {
	UUID           string
	FirstName      string
	LastName       string
	DateOfBirth    string
	HasCertificate string
	CreatedTS      string
	UpdatedTS      string
	DeletedTS      string
	ParentID       string
}{
	UUID:           "child_information.uuid",
	FirstName:      "child_information.first_name",
	LastName:       "child_information.last_name",
	DateOfBirth:    "child_information.date_of_birth",
	HasCertificate: "child_information.has_certificate",
	CreatedTS:      "child_information.created_ts",
	UpdatedTS:      "child_information.updated_ts",
	DeletedTS:      "child_information.deleted_ts",
	ParentID:       "child_information.parent_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChildInformationWhere = struct {
	UUID           whereHelperstring
	FirstName      whereHelpernull_String
	LastName       whereHelpernull_String
	DateOfBirth    whereHelpernull_Time
	HasCertificate whereHelpernull_Bool
	CreatedTS      whereHelpernull_Time
	UpdatedTS      whereHelpernull_Time
	DeletedTS      whereHelpernull_Time
	ParentID       whereHelpernull_String
}{
	UUID:           whereHelperstring{field: "\"child_information\".\"uuid\""},
	FirstName:      whereHelpernull_String{field: "\"child_information\".\"first_name\""},
	LastName:       whereHelpernull_String{field: "\"child_information\".\"last_name\""},
	DateOfBirth:    whereHelpernull_Time{field: "\"child_information\".\"date_of_birth\""},
	HasCertificate: whereHelpernull_Bool{field: "\"child_information\".\"has_certificate\""},
	CreatedTS:      whereHelpernull_Time{field: "\"child_information\".\"created_ts\""},
	UpdatedTS:      whereHelpernull_Time{field: "\"child_information\".\"updated_ts\""},
	DeletedTS:      whereHelpernull_Time{field: "\"child_information\".\"deleted_ts\""},
	ParentID:       whereHelpernull_String{field: "\"child_information\".\"parent_id\""},
}

// ChildInformationRels is where relationship names are stored.
var ChildInformationRels = struct {
	Parent                  string
	ChildFlightInformations string
}{
	Parent:                  "Parent",
	ChildFlightInformations: "ChildFlightInformations",
}

// childInformationR is where relationships are stored.
type childInformationR struct {
	Parent                  *ParentInformation     `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	ChildFlightInformations FlightInformationSlice `boil:"ChildFlightInformations" json:"ChildFlightInformations" toml:"ChildFlightInformations" yaml:"ChildFlightInformations"`
}

// NewStruct creates a new relationship struct
func (*childInformationR) NewStruct() *childInformationR {
	return &childInformationR{}
}

func (r *childInformationR) GetParent() *ParentInformation {
	if r == nil {
		return nil
	}
	return r.Parent
}

func (r *childInformationR) GetChildFlightInformations() FlightInformationSlice {
	if r == nil {
		return nil
	}
	return r.ChildFlightInformations
}

// childInformationL is where Load methods for each relationship are stored.
type childInformationL struct{}

var (
	childInformationAllColumns            = []string{"uuid", "first_name", "last_name", "date_of_birth", "has_certificate", "created_ts", "updated_ts", "deleted_ts", "parent_id"}
	childInformationColumnsWithoutDefault = []string{"uuid"}
	childInformationColumnsWithDefault    = []string{"first_name", "last_name", "date_of_birth", "has_certificate", "created_ts", "updated_ts", "deleted_ts", "parent_id"}
	childInformationPrimaryKeyColumns     = []string{"uuid"}
	childInformationGeneratedColumns      = []string{}
)

type (
	// ChildInformationSlice is an alias for a slice of pointers to ChildInformation.
	// This should almost always be used instead of []ChildInformation.
	ChildInformationSlice []*ChildInformation

	childInformationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	childInformationType                 = reflect.TypeOf(&ChildInformation{})
	childInformationMapping              = queries.MakeStructMapping(childInformationType)
	childInformationPrimaryKeyMapping, _ = queries.BindMapping(childInformationType, childInformationMapping, childInformationPrimaryKeyColumns)
	childInformationInsertCacheMut       sync.RWMutex
	childInformationInsertCache          = make(map[string]insertCache)
	childInformationUpdateCacheMut       sync.RWMutex
	childInformationUpdateCache          = make(map[string]updateCache)
	childInformationUpsertCacheMut       sync.RWMutex
	childInformationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single childInformation record from the query.
func (q childInformationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChildInformation, error) {
	o := &ChildInformation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for child_information")
	}

	return o, nil
}

// All returns all ChildInformation records from the query.
func (q childInformationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChildInformationSlice, error) {
	var o []*ChildInformation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to ChildInformation slice")
	}

	return o, nil
}

// Count returns the count of all ChildInformation records in the query.
func (q childInformationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count child_information rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q childInformationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if child_information exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *ChildInformation) Parent(mods ...qm.QueryMod) parentInformationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	return ParentInformations(queryMods...)
}

// ChildFlightInformations retrieves all the flight_information's FlightInformations with an executor via child_uuid column.
func (o *ChildInformation) ChildFlightInformations(mods ...qm.QueryMod) flightInformationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"flight_information\".\"child_uuid\"=?", o.UUID),
	)

	return FlightInformations(queryMods...)
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (childInformationL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChildInformation interface{}, mods queries.Applicator) error {
	var slice []*ChildInformation
	var object *ChildInformation

	if singular {
		var ok bool
		object, ok = maybeChildInformation.(*ChildInformation)
		if !ok {
			object = new(ChildInformation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChildInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChildInformation))
			}
		}
	} else {
		s, ok := maybeChildInformation.(*[]*ChildInformation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChildInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChildInformation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &childInformationR{}
		}
		if !queries.IsNil(object.ParentID) {
			args[object.ParentID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &childInformationR{}
			}

			if !queries.IsNil(obj.ParentID) {
				args[obj.ParentID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`parent_information`),
		qm.WhereIn(`parent_information.uuid in ?`, argsSlice...),
		qmhelper.WhereIsNull(`parent_information.deleted_ts`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ParentInformation")
	}

	var resultSlice []*ParentInformation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ParentInformation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for parent_information")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for parent_information")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &parentInformationR{}
		}
		foreign.R.ParentChildInformations = append(foreign.R.ParentChildInformations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.UUID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &parentInformationR{}
				}
				foreign.R.ParentChildInformations = append(foreign.R.ParentChildInformations, local)
				break
			}
		}
	}

	return nil
}

// LoadChildFlightInformations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (childInformationL) LoadChildFlightInformations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChildInformation interface{}, mods queries.Applicator) error {
	var slice []*ChildInformation
	var object *ChildInformation

	if singular {
		var ok bool
		object, ok = maybeChildInformation.(*ChildInformation)
		if !ok {
			object = new(ChildInformation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChildInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChildInformation))
			}
		}
	} else {
		s, ok := maybeChildInformation.(*[]*ChildInformation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChildInformation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChildInformation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &childInformationR{}
		}
		args[object.UUID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &childInformationR{}
			}
			args[obj.UUID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`flight_information`),
		qm.WhereIn(`flight_information.child_uuid in ?`, argsSlice...),
		qmhelper.WhereIsNull(`flight_information.deleted_ts`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flight_information")
	}

	var resultSlice []*FlightInformation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flight_information")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flight_information")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flight_information")
	}

	if singular {
		object.R.ChildFlightInformations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flightInformationR{}
			}
			foreign.R.Child = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UUID, foreign.ChildUUID) {
				local.R.ChildFlightInformations = append(local.R.ChildFlightInformations, foreign)
				if foreign.R == nil {
					foreign.R = &flightInformationR{}
				}
				foreign.R.Child = local
				break
			}
		}
	}

	return nil
}

// SetParent of the childInformation to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentChildInformations.
func (o *ChildInformation) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ParentInformation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"child_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, childInformationPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.UUID)
	if o.R == nil {
		o.R = &childInformationR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &parentInformationR{
			ParentChildInformations: ChildInformationSlice{o},
		}
	} else {
		related.R.ParentChildInformations = append(related.R.ParentChildInformations, o)
	}

	return nil
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ChildInformation) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *ParentInformation) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentChildInformations {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentChildInformations)
		if ln > 1 && i < ln-1 {
			related.R.ParentChildInformations[i] = related.R.ParentChildInformations[ln-1]
		}
		related.R.ParentChildInformations = related.R.ParentChildInformations[:ln-1]
		break
	}
	return nil
}

// AddChildFlightInformations adds the given related objects to the existing relationships
// of the child_information, optionally inserting them as new records.
// Appends related to o.R.ChildFlightInformations.
// Sets related.R.Child appropriately.
func (o *ChildInformation) AddChildFlightInformations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FlightInformation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChildUUID, o.UUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"flight_information\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"child_uuid"}),
				strmangle.WhereClause("\"", "\"", 2, flightInformationPrimaryKeyColumns),
			)
			values := []interface{}{o.UUID, rel.UUID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChildUUID, o.UUID)
		}
	}

	if o.R == nil {
		o.R = &childInformationR{
			ChildFlightInformations: related,
		}
	} else {
		o.R.ChildFlightInformations = append(o.R.ChildFlightInformations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flightInformationR{
				Child: o,
			}
		} else {
			rel.R.Child = o
		}
	}
	return nil
}

// SetChildFlightInformations removes all previously related items of the
// child_information replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Child's ChildFlightInformations accordingly.
// Replaces o.R.ChildFlightInformations with related.
// Sets related.R.Child's ChildFlightInformations accordingly.
func (o *ChildInformation) SetChildFlightInformations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FlightInformation) error {
	query := "update \"flight_information\" set \"child_uuid\" = null where \"child_uuid\" = $1"
	values := []interface{}{o.UUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChildFlightInformations {
			queries.SetScanner(&rel.ChildUUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Child = nil
		}
		o.R.ChildFlightInformations = nil
	}

	return o.AddChildFlightInformations(ctx, exec, insert, related...)
}

// RemoveChildFlightInformations relationships from objects passed in.
// Removes related items from R.ChildFlightInformations (uses pointer comparison, removal does not keep order)
// Sets related.R.Child.
func (o *ChildInformation) RemoveChildFlightInformations(ctx context.Context, exec boil.ContextExecutor, related ...*FlightInformation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChildUUID, nil)
		if rel.R != nil {
			rel.R.Child = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("child_uuid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildFlightInformations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildFlightInformations)
			if ln > 1 && i < ln-1 {
				o.R.ChildFlightInformations[i] = o.R.ChildFlightInformations[ln-1]
			}
			o.R.ChildFlightInformations = o.R.ChildFlightInformations[:ln-1]
			break
		}
	}

	return nil
}

// ChildInformations retrieves all the records using an executor.
func ChildInformations(mods ...qm.QueryMod) childInformationQuery {
	mods = append(mods, qm.From("\"child_information\""), qmhelper.WhereIsNull("\"child_information\".\"deleted_ts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"child_information\".*"})
	}

	return childInformationQuery{q}
}

// FindChildInformation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChildInformation(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*ChildInformation, error) {
	childInformationObj := &ChildInformation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"child_information\" where \"uuid\"=$1 and \"deleted_ts\" is null", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, childInformationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from child_information")
	}

	return childInformationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChildInformation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no child_information provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedTS).IsZero() {
			queries.SetScanner(&o.CreatedTS, currTime)
		}
		if queries.MustTime(o.UpdatedTS).IsZero() {
			queries.SetScanner(&o.UpdatedTS, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(childInformationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	childInformationInsertCacheMut.RLock()
	cache, cached := childInformationInsertCache[key]
	childInformationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			childInformationAllColumns,
			childInformationColumnsWithDefault,
			childInformationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(childInformationType, childInformationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(childInformationType, childInformationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"child_information\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"child_information\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into child_information")
	}

	if !cached {
		childInformationInsertCacheMut.Lock()
		childInformationInsertCache[key] = cache
		childInformationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ChildInformation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChildInformation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedTS, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	childInformationUpdateCacheMut.RLock()
	cache, cached := childInformationUpdateCache[key]
	childInformationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			childInformationAllColumns,
			childInformationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_ts"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update child_information, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"child_information\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, childInformationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(childInformationType, childInformationMapping, append(wl, childInformationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update child_information row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for child_information")
	}

	if !cached {
		childInformationUpdateCacheMut.Lock()
		childInformationUpdateCache[key] = cache
		childInformationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q childInformationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for child_information")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for child_information")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChildInformationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"child_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, childInformationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in childInformation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all childInformation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChildInformation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no child_information provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedTS).IsZero() {
			queries.SetScanner(&o.CreatedTS, currTime)
		}
		queries.SetScanner(&o.UpdatedTS, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(childInformationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	childInformationUpsertCacheMut.RLock()
	cache, cached := childInformationUpsertCache[key]
	childInformationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			childInformationAllColumns,
			childInformationColumnsWithDefault,
			childInformationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			childInformationAllColumns,
			childInformationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert child_information, could not build update column list")
		}

		ret := strmangle.SetComplement(childInformationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(childInformationPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert child_information, could not build conflict column list")
			}

			conflict = make([]string, len(childInformationPrimaryKeyColumns))
			copy(conflict, childInformationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"child_information\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(childInformationType, childInformationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(childInformationType, childInformationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert child_information")
	}

	if !cached {
		childInformationUpsertCacheMut.Lock()
		childInformationUpsertCache[key] = cache
		childInformationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ChildInformation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChildInformation) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no ChildInformation provided for delete")
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), childInformationPrimaryKeyMapping)
		sql = "DELETE FROM \"child_information\" WHERE \"uuid\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedTS = null.TimeFrom(currTime)
		wl := []string{"deleted_ts"}
		sql = fmt.Sprintf("UPDATE \"child_information\" SET %s WHERE \"uuid\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(childInformationType, childInformationMapping, append(wl, childInformationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from child_information")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for child_information")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q childInformationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no childInformationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_ts": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from child_information")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for child_information")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChildInformationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childInformationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"child_information\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, childInformationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childInformationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedTS = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_ts"}
		sql = fmt.Sprintf("UPDATE \"child_information\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, childInformationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from childInformation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for child_information")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChildInformation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChildInformation(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChildInformationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChildInformationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"child_information\".* FROM \"child_information\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, childInformationPrimaryKeyColumns, len(*o)) +
		"and \"deleted_ts\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ChildInformationSlice")
	}

	*o = slice

	return nil
}

// ChildInformationExists checks if the ChildInformation row exists.
func ChildInformationExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"child_information\" where \"uuid\"=$1 and \"deleted_ts\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if child_information exists")
	}

	return exists, nil
}

// Exists checks if the ChildInformation row exists.
func (o *ChildInformation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChildInformationExists(ctx, exec, o.UUID)
}
